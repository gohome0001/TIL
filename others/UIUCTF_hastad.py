import gmpy2
import binascii
import itertools

e = 3

# numbers were 

n1 = gmpy2.mpz("132234134829119540227597138408235510342868554801336879974815311454997276092359558934982618171900801833006878600397261852690529643322286166177011245459012652003295077363579508679276979228469037639943062751983762887805477452486370583167283575557377732529312085190562206111578529396918713051118544985081022593103")
n2 = gmpy2.mpz("151840410458405564759268408562927592955107234653419055342360483539847622487527943176734717135441607624675023448156978676735830422196913234776971085990208762629026389750286515040490567201875321543128993620281332806332383581738971722184522713448718112473152359081295138185940412474652282965424917833379942266591")
n3 = gmpy2.mpz("137358063224127558665242164252008804516583081388404343984996985663751821997360720404922291110136349637861414290192865568966327491016411797081286505002305399531536997058236062283402594551513606924372499284644402518477163941522028104842515009761243643570874272570250426523463414498317128736467995549181154655469")

m = ['21054947296942190338799727070009084176435160377820299185557636270270998236627134230478365226607638213909918117935469144275723224454696247536998998925706638571886804429863705488183796592495918652169235413266021', 
'21054947296948911730445823675291340890633531869468688751487541552598289486890254858520833655228363861929861359510149810779615275924404078958965183786212526047179942550487093758845001209959416163748997583276389', 
'21054947296946659885377776272491874874537529069645540158259704650639367304637998683605935635354956046767601740400139696961641284525638793541885037042195096769011543338671638211957890457069584557661716187556453', 
'21054947296942190338799727070009084176435160377820299185557636270270998236627134230478365226607638213909918117935469144275723224454696247536998998925706638571886804429863705488183796592495918652169235413266021', 
'21054947296942759999977011610402792771353109064787159228626843460087044554373242273111271682984745055002499971539529898306148562511532962583113735286408553629683221078718521122133839880446676537952865336766821', 
'21054947296948911730445823675291340890633531869468688751487541552598289486890254858520833655228363861929861359510149810779615275924404078958965183786212526047179942550487093758845001209959416163748997583276389', 
'21054947296942759999977011610402792771353109064787159228626843460087044554373242273111271682984745055002499971539529898306148562511532962583113735286408553629683221078718521122133839880446676537952865336766821', 
'21054947296936581410356447752283089520536936306436654920747813923093509672558661142311207928366219833204705406644536928261082393118711213212399870459699198899815148122586223153096947184690775837180660191256677', 
'21054947296946659885377776272491874874537529069645540158259704650639367304637998683605935635354956046767601740400139696961641284525638793541885037042195096769011543338671638211957890457069584557661716187556453', 
'21054947296948364512210731538716085121330905526906041252510906841424818376389940422405575101841968418828155124998506446693953325613683917944701445896254858932830862610312594659337853778398797111357905646317157', 
'21054947296936581410356447752283089520536936306436654920747813923093509672558661142311207928366219833204705406644536928261082393118711213212399870459699198899815148122586223153096947184690775837180660191256677', 
'21054947296948911730445823675291340890633531869468688751487541552598289486890254858520833655228363861929861359510149810779615275924404078958965183786212526047179942550487093758845001209959416163748997583276389', 
'21054947296946659876587232822733097182998053616590341855314784759379079666895745436979752623399001406826336845328805001780093275855198128969856356818353917189835938285967324508459328269707751618052961261655653', 
'21054947296946659876587232822733097182998053616590341855314784759379079666895745436979752623399001406826336845328805001780093275855198128969856356818353917189835938285967324508459328269707751618052961261655653', 
'21054947296948364512210731538716085121330905526906041252510906841424818376389940422405575101841968418828155124998506446693953325613683917944701445896254858932830862610312594659337853778398797111357905646317157']

M = n1*n2*n3
ml = itertools.combinations(m,3) # this is it!

for i in ml:
    m1 = M/n1
    m2 = M/n2
    m3 = M/n3
    
    c1,c2,c3 = map(gmpy2.mpz,i)

    t1 = c1*(m1)*gmpy2.invert(m1,n1)
    t2 = c2*(m2)*gmpy2.invert(m2,n2)
    t3 = c3*(m3)*gmpy2.invert(m3,n3)
    
    x = (t1+t2+t3) % M # chinese reminder theorem
    m, avail = gmpy2.iroot(x,e) # 
    if avail:
        print binascii.unhexlify(gmpy2.digits(m,16))

